{
  "tasks": [
    {
      "id": "ba2cf580-7cb5-41b5-aa71-abee84cb7b45",
      "name": "Setup Upstash Redis Client and Configuration",
      "description": "Create Redis client infrastructure for rate limiting and caching. Implement connection management, error handling, and basic Redis operations using Upstash REST API. Configure environment variables and add Redis configuration to existing hierarchical config system.",
      "notes": "Must use Upstash REST API for serverless compatibility. Include comprehensive error handling and connection monitoring. Follow existing config hierarchy pattern.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-07-10T11:00:14.192Z",
      "updatedAt": "2025-07-10T11:12:34.348Z",
      "relatedFiles": [
        {
          "path": "lib/redis.ts",
          "type": "CREATE",
          "description": "Main Redis client implementation with Upstash REST API integration"
        },
        {
          "path": "config/default.ts",
          "type": "TO_MODIFY",
          "description": "Add Redis configuration section",
          "lineStart": 1,
          "lineEnd": 10
        },
        {
          "path": "config/schemas/index.ts",
          "type": "TO_MODIFY",
          "description": "Add Redis config schema validation"
        }
      ],
      "implementationGuide": "1. Create `/lib/redis.ts` with Upstash client using @upstash/redis\\n2. Add Redis config to `config/default.ts` following existing pattern\\n3. Environment variables: UPSTASH_REDIS_REST_URL, UPSTASH_REDIS_REST_TOKEN\\n4. Implement connection health check and retry logic\\n5. Add Redis schema validation with Zod\\n\\nPseudocode:\\n```typescript\\n// lib/redis.ts\\nclass RedisClient {\\n  constructor(config) { /* Upstash REST client */ }\\n  async get(key: string) { /* with error handling */ }\\n  async set(key: string, value: any, ttl?: number) { /* with expiration */ }\\n  async zadd(key: string, score: number, member: string) { /* for sliding window */ }\\n  async zremrangebyscore(key: string, min: number, max: number) { /* cleanup */ }\\n}\\n```",
      "verificationCriteria": "Redis client successfully connects to Upstash, performs basic operations (get/set/zadd/zrem), handles connection errors gracefully, and follows existing configuration patterns. Environment variables properly loaded and validated.",
      "analysisResult": "Phase 3 Advanced Security Implementation: Build enterprise-grade security features on existing Next.js 15 + Supabase authentication foundation. Core architecture: leverage existing middleware.ts Phase 2 slot, hierarchical config pattern, device confidence scoring (30/25/20/25 weights), and strict TypeScript compliance. Integration points: Redis ZSET sliding window rate limiting, NIST AAL2-compliant 2FA/MFA with TOTP, structured security logging replacing console.log, and Resend email notifications. Must maintain shrimp-rules.md compliance and existing Auth→RateLimiting→Validation→BusinessLogic middleware ordering.",
      "summary": "Successfully implemented Upstash Redis client infrastructure with comprehensive error handling, health monitoring, and proper TypeScript integration. Created Redis client with sliding window operations support, added hierarchical configuration system integration, implemented environment variable handling with validation, and provided testing framework. All verification criteria met: Redis client connects to Upstash, performs all required operations (get/set/zadd/zrem), handles connection errors gracefully with retry logic, follows existing configuration patterns, and includes proper TypeScript types.",
      "completedAt": "2025-07-10T11:12:34.342Z"
    },
    {
      "id": "de910114-fdc8-403f-add3-f6fa6fe20971",
      "name": "Implement Sliding Window Rate Limiter",
      "description": "Create adaptive rate limiting system using Redis ZSET with sliding window algorithm. Implement per-endpoint rate limits that adapt based on device confidence scores using the existing scoring formula from shrimp-rules.md.",
      "notes": "Must integrate with existing device confidence scoring system. Implement proper cleanup of expired entries. Add comprehensive rate limit headers.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "ba2cf580-7cb5-41b5-aa71-abee84cb7b45"
        }
      ],
      "createdAt": "2025-07-10T11:00:14.192Z",
      "updatedAt": "2025-07-10T11:20:41.825Z",
      "relatedFiles": [
        {
          "path": "lib/rate-limiter.ts",
          "type": "CREATE",
          "description": "Sliding window rate limiter implementation with adaptive scoring"
        },
        {
          "path": "lib/confidence-scoring.ts",
          "type": "REFERENCE",
          "description": "Use existing confidence scoring algorithm for adaptive limits",
          "lineStart": 1,
          "lineEnd": 50
        },
        {
          "path": "config/default.ts",
          "type": "TO_MODIFY",
          "description": "Add rate limiting configuration section"
        }
      ],
      "implementationGuide": "1. Create `/lib/rate-limiter.ts` with sliding window algorithm\\n2. Use Redis ZSET for time-based tracking\\n3. Implement adaptive formula: `adaptiveLimit = baseLimit × (1 + confidenceScore/100)`\\n4. Configure rate limits per endpoint (signin: 5, signup: 3, verify: 10)\\n5. Return rate limit headers (X-RateLimit-Limit, X-RateLimit-Remaining)\\n\\nPseudocode:\\n```typescript\\nclass RateLimiter {\\n  async checkLimit(endpoint: string, identifier: string, confidenceScore: number) {\\n    const baseLimit = this.limits[endpoint].max;\\n    const adaptiveLimit = baseLimit * (1 + confidenceScore / 100);\\n    const window = this.limits[endpoint].window;\\n    \\n    // Use Redis ZSET sliding window\\n    const key = `rate:${endpoint}:${identifier}`;\\n    const now = Date.now();\\n    const windowStart = now - (window * 1000);\\n    \\n    // Remove old entries\\n    await redis.zremrangebyscore(key, 0, windowStart);\\n    \\n    // Count current requests\\n    const current = await redis.zcard(key);\\n    \\n    if (current >= adaptiveLimit) {\\n      return { allowed: false, remaining: 0 };\\n    }\\n    \\n    // Add current request\\n    await redis.zadd(key, now, crypto.randomUUID());\\n    await redis.expire(key, window);\\n    \\n    return { allowed: true, remaining: adaptiveLimit - current - 1 };\\n  }\\n}\\n```",
      "verificationCriteria": "Rate limiter correctly implements sliding window algorithm, adapts limits based on confidence scores, returns proper headers, handles Redis failures gracefully, and cleans up expired entries automatically.",
      "analysisResult": "Phase 3 Advanced Security Implementation: Build enterprise-grade security features on existing Next.js 15 + Supabase authentication foundation. Core architecture: leverage existing middleware.ts Phase 2 slot, hierarchical config pattern, device confidence scoring (30/25/20/25 weights), and strict TypeScript compliance. Integration points: Redis ZSET sliding window rate limiting, NIST AAL2-compliant 2FA/MFA with TOTP, structured security logging replacing console.log, and Resend email notifications. Must maintain shrimp-rules.md compliance and existing Auth→RateLimiting→Validation→BusinessLogic middleware ordering.",
      "summary": "Sliding window rate limiter implementation completed successfully with adaptive scoring based on device confidence. Core features include Redis ZSET-based sliding window algorithm, adaptive rate limits using formula from shrimp-rules.md (adaptiveLimit = baseLimit * (1 + trustScore / 100)), comprehensive error handling with exponential backoff, TypeScript strict mode compliance, and singleton pattern for efficient resource management. All TypeScript compilation errors resolved, Redis client methods properly implemented with correct type signatures, and integration ready for middleware usage.",
      "completedAt": "2025-07-10T11:20:41.823Z"
    },
    {
      "id": "e65b9e18-ffc7-41d1-b7f7-3f07c2bdd5f7",
      "name": "Integrate Rate Limiting into Middleware",
      "description": "Add rate limiting to the existing middleware.ts in the pre-reserved Phase 2 slot. Maintain the Auth→RateLimiting→Validation→BusinessLogic order specified in shrimp-rules.md. Extract device confidence score from existing auth context.",
      "notes": "Must maintain existing middleware architecture and not break Phase 1 authentication. Handle both authenticated and anonymous users appropriately.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "de910114-fdc8-403f-add3-f6fa6fe20971"
        }
      ],
      "createdAt": "2025-07-10T11:00:14.192Z",
      "updatedAt": "2025-07-10T11:00:14.192Z",
      "relatedFiles": [
        {
          "path": "middleware.ts",
          "type": "TO_MODIFY",
          "description": "Add rate limiting in Phase 2 slot",
          "lineStart": 15,
          "lineEnd": 25
        },
        {
          "path": "lib/device-detection.ts",
          "type": "REFERENCE",
          "description": "Use existing IP extraction logic"
        },
        {
          "path": "lib/confidence-scoring.ts",
          "type": "REFERENCE",
          "description": "Access existing confidence scoring results"
        }
      ],
      "implementationGuide": "1. Modify `/middleware.ts` to add rate limiting in Phase 2 slot\\n2. Extract confidence score from existing auth result\\n3. Apply rate limiting based on request path and user identifier\\n4. Return 429 responses with proper headers when limits exceeded\\n5. Pass rate limit info to downstream via headers\\n\\nPseudocode:\\n```typescript\\n// middleware.ts - Phase 2 integration\\nasync function withRateLimit(request: NextRequest, authResult: AuthResult) {\\n  const identifier = authResult.userId || getClientIP(request);\\n  const endpoint = extractEndpoint(request.nextUrl.pathname);\\n  const confidenceScore = authResult.confidenceScore || 0;\\n  \\n  if (requiresRateLimit(endpoint)) {\\n    const result = await rateLimiter.checkLimit(endpoint, identifier, confidenceScore);\\n    \\n    if (!result.allowed) {\\n      return {\\n        blocked: true,\\n        response: new Response('Rate limit exceeded', {\\n          status: 429,\\n          headers: {\\n            'X-RateLimit-Limit': result.limit.toString(),\\n            'X-RateLimit-Remaining': '0',\\n            'Retry-After': result.retryAfter.toString()\\n          }\\n        })\\n      };\\n    }\\n    \\n    // Add rate limit headers to successful requests\\n    request.headers.set('X-RateLimit-Remaining', result.remaining.toString());\\n  }\\n  \\n  return { blocked: false };\\n}\\n```",
      "verificationCriteria": "Middleware properly applies rate limiting in Phase 2, maintains existing auth flow, returns correct 429 responses with headers, and doesn't break existing functionality. Rate limiting works for both authenticated and anonymous users.",
      "analysisResult": "Phase 3 Advanced Security Implementation: Build enterprise-grade security features on existing Next.js 15 + Supabase authentication foundation. Core architecture: leverage existing middleware.ts Phase 2 slot, hierarchical config pattern, device confidence scoring (30/25/20/25 weights), and strict TypeScript compliance. Integration points: Redis ZSET sliding window rate limiting, NIST AAL2-compliant 2FA/MFA with TOTP, structured security logging replacing console.log, and Resend email notifications. Must maintain shrimp-rules.md compliance and existing Auth→RateLimiting→Validation→BusinessLogic middleware ordering."
    },
    {
      "id": "105731cd-5d28-4f8b-ba1e-465c195b9f0a",
      "name": "Implement TOTP 2FA System",
      "description": "Create Time-based One-Time Password (TOTP) system compliant with RFC 6238 for 2FA. Implement QR code generation, secret management, and TOTP validation with tolerance window. Include backup codes generation and management.",
      "notes": "Use industry-standard TOTP implementation with proper security. Store secrets encrypted and backup codes hashed. Include rate limiting for verification attempts.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-07-10T11:00:14.192Z",
      "updatedAt": "2025-07-10T11:00:14.192Z",
      "relatedFiles": [
        {
          "path": "lib/totp.ts",
          "type": "CREATE",
          "description": "TOTP implementation with secret management and backup codes"
        },
        {
          "path": "types/auth.ts",
          "type": "TO_MODIFY",
          "description": "Add 2FA related types and interfaces"
        },
        {
          "path": "config/default.ts",
          "type": "TO_MODIFY",
          "description": "Add MFA configuration section"
        }
      ],
      "implementationGuide": "1. Create `/lib/totp.ts` with TOTP implementation using `otplib`\\n2. Generate secret keys and QR codes for authenticator apps\\n3. Implement TOTP validation with 30-second window tolerance\\n4. Create backup codes system (10 codes, single-use, hashed storage)\\n5. Add database schema for user secrets and backup codes\\n\\nPseudocode:\\n```typescript\\nclass TOTPManager {\\n  generateSecret(userId: string): { secret: string, qrCode: string, backupCodes: string[] } {\\n    const secret = authenticator.generateSecret();\\n    const qrCode = this.generateQRCode(secret, userId);\\n    const backupCodes = this.generateBackupCodes(10);\\n    \\n    // Store hashed versions in database\\n    await this.storeUserSecret(userId, secret);\\n    await this.storeBackupCodes(userId, backupCodes);\\n    \\n    return { secret, qrCode, backupCodes };\\n  }\\n  \\n  verifyTOTP(userId: string, token: string): boolean {\\n    const secret = await this.getUserSecret(userId);\\n    return authenticator.verify({ token, secret, window: 1 }); // ±30 seconds\\n  }\\n  \\n  verifyBackupCode(userId: string, code: string): boolean {\\n    const storedCodes = await this.getBackupCodes(userId);\\n    const isValid = storedCodes.some(stored => bcrypt.compare(code, stored.hash));\\n    \\n    if (isValid) {\\n      await this.invalidateBackupCode(userId, code);\\n    }\\n    \\n    return isValid;\\n  }\\n}\\n```",
      "verificationCriteria": "TOTP system generates valid secrets and QR codes, validates tokens with proper time window, manages backup codes securely with single-use invalidation, and integrates with existing user system.",
      "analysisResult": "Phase 3 Advanced Security Implementation: Build enterprise-grade security features on existing Next.js 15 + Supabase authentication foundation. Core architecture: leverage existing middleware.ts Phase 2 slot, hierarchical config pattern, device confidence scoring (30/25/20/25 weights), and strict TypeScript compliance. Integration points: Redis ZSET sliding window rate limiting, NIST AAL2-compliant 2FA/MFA with TOTP, structured security logging replacing console.log, and Resend email notifications. Must maintain shrimp-rules.md compliance and existing Auth→RateLimiting→Validation→BusinessLogic middleware ordering."
    },
    {
      "id": "db42c565-3f6d-490e-8e3d-dd660066b835",
      "name": "Create 2FA API Routes",
      "description": "Implement API endpoints for 2FA setup and verification following existing authentication route patterns. Create /api/auth/setup-2fa and /api/auth/verify-2fa routes with proper validation and error handling.",
      "notes": "Follow existing error handling patterns. Implement proper rate limiting on verification attempts. Ensure secure handling of secrets.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "105731cd-5d28-4f8b-ba1e-465c195b9f0a"
        }
      ],
      "createdAt": "2025-07-10T11:00:14.192Z",
      "updatedAt": "2025-07-10T11:00:14.192Z",
      "relatedFiles": [
        {
          "path": "app/api/auth/setup-2fa/route.ts",
          "type": "CREATE",
          "description": "2FA setup endpoint with QR code generation"
        },
        {
          "path": "app/api/auth/verify-2fa/route.ts",
          "type": "CREATE",
          "description": "2FA verification endpoint"
        },
        {
          "path": "schemas/auth.ts",
          "type": "TO_MODIFY",
          "description": "Add 2FA validation schemas"
        },
        {
          "path": "app/api/auth/signin/route.ts",
          "type": "REFERENCE",
          "description": "Follow existing auth route patterns",
          "lineStart": 1,
          "lineEnd": 50
        }
      ],
      "implementationGuide": "1. Create `/app/api/auth/setup-2fa/route.ts` for initial 2FA setup\\n2. Create `/app/api/auth/verify-2fa/route.ts` for token verification\\n3. Follow existing route patterns from signin/signup\\n4. Use existing Zod schemas for validation\\n5. Integrate with TOTP system and return QR codes\\n\\nPseudocode:\\n```typescript\\n// app/api/auth/setup-2fa/route.ts\\nexport async function POST(request: Request) {\\n  try {\\n    const user = await getCurrentUser(request);\\n    if (!user) return unauthorized();\\n    \\n    const { secret, qrCode, backupCodes } = await totpManager.generateSecret(user.id);\\n    \\n    return NextResponse.json({\\n      qrCode,\\n      backupCodes,\\n      secret: secret // Only return for setup, remove after verification\\n    });\\n  } catch (error) {\\n    return handleError(error);\\n  }\\n}\\n\\n// app/api/auth/verify-2fa/route.ts\\nexport async function POST(request: Request) {\\n  const body = await request.json();\\n  const validatedData = Verify2FASchema.parse(body);\\n  \\n  const user = await getCurrentUser(request);\\n  if (!user) return unauthorized();\\n  \\n  const isValid = await totpManager.verifyTOTP(user.id, validatedData.token);\\n  \\n  if (isValid) {\\n    await updateUserAAL(user.id, 'aal2');\\n    return NextResponse.json({ verified: true });\\n  }\\n  \\n  return NextResponse.json({ error: 'Invalid token' }, { status: 400 });\\n}\\n```",
      "verificationCriteria": "API routes follow existing patterns, properly validate inputs, handle errors consistently, integrate with TOTP system, and manage AAL levels correctly. Rate limiting applied to prevent brute force attacks.",
      "analysisResult": "Phase 3 Advanced Security Implementation: Build enterprise-grade security features on existing Next.js 15 + Supabase authentication foundation. Core architecture: leverage existing middleware.ts Phase 2 slot, hierarchical config pattern, device confidence scoring (30/25/20/25 weights), and strict TypeScript compliance. Integration points: Redis ZSET sliding window rate limiting, NIST AAL2-compliant 2FA/MFA with TOTP, structured security logging replacing console.log, and Resend email notifications. Must maintain shrimp-rules.md compliance and existing Auth→RateLimiting→Validation→BusinessLogic middleware ordering."
    },
    {
      "id": "f6e93c18-ffb4-41e0-90a1-8e21f5854a04",
      "name": "Implement AAL Management System",
      "description": "Create Authentication Assurance Level (AAL) management system compliant with NIST SP 800-63B. Implement AAL1 (basic auth) and AAL2 (MFA verified) logic with automatic upgrading and session management.",
      "notes": "Must integrate with existing device sessions table. Follow NIST guidelines for AAL requirements. Include proper logging of AAL changes.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "db42c565-3f6d-490e-8e3d-dd660066b835"
        }
      ],
      "createdAt": "2025-07-10T11:00:14.192Z",
      "updatedAt": "2025-07-10T11:00:14.192Z",
      "relatedFiles": [
        {
          "path": "lib/aal-manager.ts",
          "type": "CREATE",
          "description": "AAL management with NIST compliance"
        },
        {
          "path": "lib/device-sessions.ts",
          "type": "TO_MODIFY",
          "description": "Add AAL tracking to device sessions",
          "lineStart": 1,
          "lineEnd": 100
        },
        {
          "path": "types/auth.ts",
          "type": "TO_MODIFY",
          "description": "Add AAL types and interfaces"
        }
      ],
      "implementationGuide": "1. Create `/lib/aal-manager.ts` with AAL determination logic\\n2. Integrate with existing device sessions for AAL tracking\\n3. Implement AAL requirement checking for sensitive operations\\n4. Add AAL upgrade flow when higher assurance required\\n5. Update middleware to check AAL requirements\\n\\nPseudocode:\\n```typescript\\nclass AALManager {\\n  determineAAL(authMethod: string, mfaVerified: boolean, deviceTrust: string): AAL {\\n    if (mfaVerified || authMethod === 'backup_code') {\\n      return 'aal2';\\n    }\\n    \\n    if (deviceTrust === 'VERY_HIGH' && authMethod === 'password') {\\n      return 'aal1';\\n    }\\n    \\n    return 'aal1';\\n  }\\n  \\n  async requireAAL(userId: string, requiredAAL: AAL, currentAAL: AAL): Promise<AALCheckResult> {\\n    if (this.aalMeetsRequirement(currentAAL, requiredAAL)) {\\n      return { allowed: true };\\n    }\\n    \\n    return {\\n      allowed: false,\\n      upgradeRequired: true,\\n      requiredAAL,\\n      currentAAL\\n    };\\n  }\\n  \\n  async upgradeToAAL2(userId: string): Promise<void> {\\n    await this.updateDeviceSessionAAL(userId, 'aal2');\\n    await this.logAALUpgrade(userId);\\n  }\\n}\\n```",
      "verificationCriteria": "AAL system correctly determines authentication levels, enforces requirements for sensitive operations, upgrades AAL when MFA verified, and integrates with existing session management.",
      "analysisResult": "Phase 3 Advanced Security Implementation: Build enterprise-grade security features on existing Next.js 15 + Supabase authentication foundation. Core architecture: leverage existing middleware.ts Phase 2 slot, hierarchical config pattern, device confidence scoring (30/25/20/25 weights), and strict TypeScript compliance. Integration points: Redis ZSET sliding window rate limiting, NIST AAL2-compliant 2FA/MFA with TOTP, structured security logging replacing console.log, and Resend email notifications. Must maintain shrimp-rules.md compliance and existing Auth→RateLimiting→Validation→BusinessLogic middleware ordering."
    },
    {
      "id": "5389c723-bc7e-42e8-b272-bf11801dd72e",
      "name": "Implement Security Event Logging System",
      "description": "Replace existing console.log statements with structured security logging system. Create comprehensive event tracking for authentication, authorization, and security-related actions with proper metadata enrichment.",
      "notes": "Ensure PII is properly sanitized in logs. Include rate limiting to prevent log flooding. Add proper indexing for query performance.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-07-10T11:00:14.192Z",
      "updatedAt": "2025-07-10T11:00:14.192Z",
      "relatedFiles": [
        {
          "path": "lib/security-logger.ts",
          "type": "CREATE",
          "description": "Structured security event logging system"
        },
        {
          "path": "app/api/auth/signin/route.ts",
          "type": "TO_MODIFY",
          "description": "Replace console.log with security events",
          "lineStart": 20,
          "lineEnd": 40
        },
        {
          "path": "middleware.ts",
          "type": "TO_MODIFY",
          "description": "Add security logging for auth events",
          "lineStart": 40,
          "lineEnd": 60
        },
        {
          "path": "types/security.ts",
          "type": "CREATE",
          "description": "Security event types and interfaces"
        }
      ],
      "implementationGuide": "1. Create `/lib/security-logger.ts` with structured logging\\n2. Define security event types and schemas\\n3. Replace console.log throughout codebase with structured events\\n4. Add enrichment with IP, user-agent, device info\\n5. Store events in database table with proper indexing\\n\\nPseudocode:\\n```typescript\\nclass SecurityLogger {\\n  async logEvent(type: SecurityEventType, data: SecurityEventData, context?: EventContext) {\\n    const event = {\\n      id: crypto.randomUUID(),\\n      type,\\n      userId: context?.userId,\\n      deviceSessionId: context?.deviceSessionId,\\n      ipAddress: context?.ipAddress,\\n      userAgent: context?.userAgent,\\n      data: this.sanitizeData(data),\\n      timestamp: new Date(),\\n      severity: this.determineSeverity(type)\\n    };\\n    \\n    // Store in database\\n    await this.storeEvent(event);\\n    \\n    // Real-time alerting for critical events\\n    if (event.severity === 'CRITICAL') {\\n      await this.sendAlert(event);\\n    }\\n  }\\n  \\n  // Replace: console.log('Auth failed', error);\\n  // With: await securityLogger.logEvent('auth:failed', { error: error.message }, context);\\n}\\n```",
      "verificationCriteria": "Security logging system captures all important events, properly sanitizes data, stores structured events in database, and replaces existing console.log statements throughout the codebase.",
      "analysisResult": "Phase 3 Advanced Security Implementation: Build enterprise-grade security features on existing Next.js 15 + Supabase authentication foundation. Core architecture: leverage existing middleware.ts Phase 2 slot, hierarchical config pattern, device confidence scoring (30/25/20/25 weights), and strict TypeScript compliance. Integration points: Redis ZSET sliding window rate limiting, NIST AAL2-compliant 2FA/MFA with TOTP, structured security logging replacing console.log, and Resend email notifications. Must maintain shrimp-rules.md compliance and existing Auth→RateLimiting→Validation→BusinessLogic middleware ordering."
    },
    {
      "id": "95815778-9b8a-4f72-9d91-7e07d5fe71e9",
      "name": "Implement Threat Detection System",
      "description": "Create intelligent threat detection system to identify suspicious patterns like repeated failed logins, unusual geolocation access, and anomalous user behavior. Implement automated response mechanisms.",
      "notes": "Implement configurable thresholds for different threat types. Avoid false positives with smart detection algorithms. Include manual review mechanisms for high-risk events.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "5389c723-bc7e-42e8-b272-bf11801dd72e"
        }
      ],
      "createdAt": "2025-07-10T11:00:14.192Z",
      "updatedAt": "2025-07-10T11:00:14.192Z",
      "relatedFiles": [
        {
          "path": "lib/threat-detection.ts",
          "type": "CREATE",
          "description": "Threat detection with pattern analysis and automated responses"
        },
        {
          "path": "lib/security-logger.ts",
          "type": "REFERENCE",
          "description": "Use security events for threat analysis",
          "lineStart": 1,
          "lineEnd": 50
        },
        {
          "path": "config/default.ts",
          "type": "TO_MODIFY",
          "description": "Add threat detection configuration"
        }
      ],
      "implementationGuide": "1. Create `/lib/threat-detection.ts` with pattern analysis\\n2. Implement detection rules for common attack patterns\\n3. Add risk scoring based on user behavior\\n4. Create automated response mechanisms (temp blocks, alerts)\\n5. Integrate with security logging for comprehensive monitoring\\n\\nPseudocode:\\n```typescript\\nclass ThreatDetector {\\n  async analyzeSecurityEvent(event: SecurityEvent): Promise<ThreatAnalysis> {\\n    const patterns = await this.detectPatterns(event);\\n    const riskScore = this.calculateRiskScore(patterns);\\n    \\n    const threats = {\\n      bruteForce: await this.detectBruteForce(event),\\n      unusualLocation: await this.detectLocationAnomaly(event),\\n      deviceAnomaly: await this.detectDeviceAnomaly(event),\\n      velocityAttack: await this.detectVelocityAttack(event)\\n    };\\n    \\n    if (riskScore > this.thresholds.HIGH) {\\n      await this.triggerResponse(event, threats);\\n    }\\n    \\n    return { riskScore, threats, actions: this.recommendActions(threats) };\\n  }\\n  \\n  async detectBruteForce(event: SecurityEvent): Promise<boolean> {\\n    if (event.type !== 'auth:failed') return false;\\n    \\n    const recentFailures = await this.getRecentFailures(event.ipAddress, '15m');\\n    return recentFailures.length >= 5;\\n  }\\n  \\n  async triggerResponse(event: SecurityEvent, threats: DetectedThreats): Promise<void> {\\n    if (threats.bruteForce) {\\n      await this.temporarilyBlockIP(event.ipAddress, '1h');\\n    }\\n    \\n    if (threats.unusualLocation) {\\n      await this.requireDeviceVerification(event.userId);\\n    }\\n  }\\n}\\n```",
      "verificationCriteria": "Threat detection system identifies common attack patterns, calculates accurate risk scores, triggers appropriate automated responses, and integrates seamlessly with security logging system.",
      "analysisResult": "Phase 3 Advanced Security Implementation: Build enterprise-grade security features on existing Next.js 15 + Supabase authentication foundation. Core architecture: leverage existing middleware.ts Phase 2 slot, hierarchical config pattern, device confidence scoring (30/25/20/25 weights), and strict TypeScript compliance. Integration points: Redis ZSET sliding window rate limiting, NIST AAL2-compliant 2FA/MFA with TOTP, structured security logging replacing console.log, and Resend email notifications. Must maintain shrimp-rules.md compliance and existing Auth→RateLimiting→Validation→BusinessLogic middleware ordering."
    },
    {
      "id": "c6ead401-dddc-4980-85f4-180dc62dc529",
      "name": "Setup Resend Email Integration",
      "description": "Integrate Resend for transactional emails including security notifications, device verification, and 2FA communications. Create email templates using React Email with proper styling and responsive design.",
      "notes": "Use React Email for template management. Implement proper error handling and retry logic. Add email delivery tracking and bounce handling.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-07-10T11:00:14.192Z",
      "updatedAt": "2025-07-10T11:00:14.192Z",
      "relatedFiles": [
        {
          "path": "lib/email.ts",
          "type": "CREATE",
          "description": "Resend integration with template management"
        },
        {
          "path": "emails/security-alert.tsx",
          "type": "CREATE",
          "description": "React Email template for security alerts"
        },
        {
          "path": "emails/device-verification.tsx",
          "type": "CREATE",
          "description": "React Email template for device verification"
        },
        {
          "path": "config/default.ts",
          "type": "TO_MODIFY",
          "description": "Add email configuration section"
        }
      ],
      "implementationGuide": "1. Create `/lib/email.ts` with Resend client integration\\n2. Install React Email and create email templates\\n3. Implement email types: device-alert, security-alert, 2fa-setup\\n4. Add email queue system for background processing\\n5. Configure email settings in hierarchical config\\n\\nPseudocode:\\n```typescript\\nclass EmailService {\\n  async sendSecurityAlert(userId: string, alertType: SecurityAlertType, context: AlertContext) {\\n    const user = await this.getUser(userId);\\n    const template = this.getTemplate(alertType);\\n    \\n    const emailContent = await render(template, {\\n      userName: user.name,\\n      alertType,\\n      timestamp: new Date(),\\n      deviceInfo: context.deviceInfo,\\n      location: context.location\\n    });\\n    \\n    await this.resend.emails.send({\\n      from: this.config.fromEmail,\\n      to: user.email,\\n      subject: this.getSubject(alertType),\\n      html: emailContent\\n    });\\n    \\n    await this.logEmailSent(userId, alertType);\\n  }\\n  \\n  async queueEmail(emailData: EmailQueueItem): Promise<void> {\\n    // Background queue for non-blocking email sending\\n    await this.emailQueue.add('send-email', emailData, {\\n      attempts: 3,\\n      backoff: 'exponential'\\n    });\\n  }\\n}\\n```",
      "verificationCriteria": "Email service successfully sends transactional emails, templates render correctly, background queue processes emails reliably, and all email types integrate with security events.",
      "analysisResult": "Phase 3 Advanced Security Implementation: Build enterprise-grade security features on existing Next.js 15 + Supabase authentication foundation. Core architecture: leverage existing middleware.ts Phase 2 slot, hierarchical config pattern, device confidence scoring (30/25/20/25 weights), and strict TypeScript compliance. Integration points: Redis ZSET sliding window rate limiting, NIST AAL2-compliant 2FA/MFA with TOTP, structured security logging replacing console.log, and Resend email notifications. Must maintain shrimp-rules.md compliance and existing Auth→RateLimiting→Validation→BusinessLogic middleware ordering."
    }
  ]
}